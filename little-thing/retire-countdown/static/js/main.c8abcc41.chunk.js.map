{"version":3,"sources":["utils/fill-left.ts","utils/time-utils.ts","utils/hooks/useInterval.ts","App.tsx","utils/hooks/useCurrentTime.ts","reportWebVitals.js","index.js"],"names":["fillLeft","str","length","fillStr","toString","dateFilter","date","template","YYYY","getFullYear","MM","getMonth","dd","getDate","HH","getHours","mm","getMinutes","ss","getSeconds","result","replace","useInterval","callback","time","savedCallback","useRef","useEffect","current","timer","setInterval","clearInterval","RETIRE_TIME","Date","App","currentTime","updateInterval","useState","setTime","useCurrentTime","remainingTime","getTime","formattedRemainingTime","t","secondMS","minuteMS","hourMS","dayMS","days","Math","floor","hours","minutes","seconds","milliseconds","timestampToDays","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAGO,SAASA,EAASC,EAAUC,GAAwC,IAAxBC,EAAuB,uDAAb,IAE3D,IADAF,EAAMA,EAAIG,WACHH,EAAIC,OAASA,GAClBD,EAAG,UAAME,GAAN,OAAgBF,GAErB,OAAOA,ECDF,SAASI,EAAWC,GAAsC,IAA1BC,EAAyB,uDAAd,aAC1CC,EAAOF,EAAKG,cAAcL,WAC5BM,GAAMJ,EAAKK,WAAa,GAAGP,WAC/BM,EAAKV,EAASU,EAAI,GAClB,IAAIE,EAAKN,EAAKO,UAAUT,WACxBQ,EAAKZ,EAASY,EAAI,GAClB,IAAIE,EAAKR,EAAKS,WAAWX,WACzBU,EAAKd,EAASc,EAAI,GAClB,IAAIE,EAAKV,EAAKW,aAAab,WAC3BY,EAAKhB,EAASgB,EAAI,GAClB,IAAIE,EAAKZ,EAAKa,aAAaf,WAC3Bc,EAAKlB,EAASkB,EAAI,GAClB,IAAIE,EAASb,EAOb,OADAa,GADAA,GADAA,GADAA,GADAA,GADAA,EAASA,EAAOC,QAAQ,QAASb,IACjBa,QAAQ,MAAOX,IACfW,QAAQ,MAAOT,IACfS,QAAQ,MAAOP,IACfO,QAAQ,MAAOL,IACfK,QAAQ,MAAOH,G,WCvB1B,SAASI,EAAYC,EAAoBC,GAC9C,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WAMR,IAAME,EAAQC,aALd,WACML,EAAcG,SAChBH,EAAcG,YAGcJ,GAChC,OAAO,WACLO,cAAcF,MAEf,CAACL,ICZN,IAAMQ,EAAc,IAAIC,KAAK,0BAyCdC,EAtCH,WACV,IAAMC,ECRD,WAAgD,IAAxBC,EAAuB,uDAAN,IAAM,EAC5BC,mBAAS,IAAIJ,MADe,mBAC7CT,EAD6C,KACvCc,EADuC,KAKpD,OAHAhB,GAAY,WACVgB,EAAQ,IAAIL,QACXG,GACIZ,EDGae,CAAe,IAE7BC,EAAgBR,EAAYS,UAAYN,EAAYM,UACpDC,EFeD,SAAyBC,GAC1BA,EAAI,IACNA,EAAI,GAGN,IAAMC,EAAW,IACXC,EAAW,IACXC,EAAS,KACTC,EAAQ,MAERC,EAAOC,KAAKC,MAAMP,EAAII,GAC5BJ,GAAQK,EAAOD,EACf,IAAMI,EAAQF,KAAKC,MAAMP,EAAIG,GAC7BH,GAAQQ,EAAQL,EAChB,IAAMM,EAAUH,KAAKC,MAAMP,EAAIE,GAC/BF,GAAQS,EAAUP,EAClB,IAAMQ,EAAUJ,KAAKC,MAAMP,EAAIC,GAE/B,MAAO,CACLI,OACAG,QACAC,UACAC,UACAC,aANmBX,EAAIU,EAAUT,GEhCJW,CAAgBf,GAE/C,OACE,sBAAKgB,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,kDACA,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,oBAAf,iDACSnD,EAAW2B,EAAa,0BAEjC,sBAAKwB,UAAU,oBAAf,mBAfkB,mDAiBpB,sBAAKA,UAAU,eAAf,2CACQnD,EAAW8B,EAAa,0BAEhC,qBAAKqB,UAAU,YAAf,SACGhB,EAAgB,EACf,qCACE,wCAASxC,EAAS0C,EAAuBM,KAAM,GAA/C,iBAAqDhD,EACnD0C,EAAuBS,MACvB,GAFF,kBAIA,wCAASnD,EAAS0C,EAAuBU,QAAS,GAAlD,uBAAyDpD,EACvD0C,EAAuBW,QACvB,GAFF,iBAGKrD,EAAS0C,EAAuBY,aAAc,GAHnD,qBAMF,yDE7BKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8abcc41.chunk.js","sourcesContent":["/**\r\n * 将字符串前面补值，直到达到指定的长度\r\n */\r\nexport function fillLeft(str: any, length: number, fillStr = \"0\"): string {\r\n  str = str.toString();\r\n  while (str.length < length) {\r\n    str = `${fillStr}${str}`;\r\n  }\r\n  return str;\r\n}\r\n","import { fillLeft } from \"./fill-left\";\r\n\r\n/**\r\n * 日期格式化器\r\n * @param {Date} date 要格式化的日期\r\n * @param {string} template 模版。默认：'YYYY-MM-dd'。可使用的值：YYYY,MM,dd,HH,mm,ss\r\n */\r\nexport function dateFilter(date: Date, template = \"YYYY-MM-dd\") {\r\n  const YYYY = date.getFullYear().toString();\r\n  let MM = (date.getMonth() + 1).toString();\r\n  MM = fillLeft(MM, 2);\r\n  let dd = date.getDate().toString();\r\n  dd = fillLeft(dd, 2);\r\n  let HH = date.getHours().toString();\r\n  HH = fillLeft(HH, 2);\r\n  let mm = date.getMinutes().toString();\r\n  mm = fillLeft(mm, 2);\r\n  let ss = date.getSeconds().toString();\r\n  ss = fillLeft(ss, 2);\r\n  let result = template;\r\n  result = result.replace(/YYYY/g, YYYY);\r\n  result = result.replace(/MM/g, MM);\r\n  result = result.replace(/dd/g, dd);\r\n  result = result.replace(/HH/g, HH);\r\n  result = result.replace(/mm/g, mm);\r\n  result = result.replace(/ss/g, ss);\r\n  return result;\r\n}\r\n\r\nexport function timestampToDays(t: number) {\r\n  if (t < 0) {\r\n    t = 0;\r\n  }\r\n\r\n  const secondMS = 1000;\r\n  const minuteMS = 60 * secondMS;\r\n  const hourMS = 60 * minuteMS;\r\n  const dayMS = 24 * hourMS;\r\n\r\n  const days = Math.floor(t / dayMS);\r\n  t = t - days * dayMS;\r\n  const hours = Math.floor(t / hourMS);\r\n  t = t - hours * hourMS;\r\n  const minutes = Math.floor(t / minuteMS);\r\n  t = t - minutes * minuteMS;\r\n  const seconds = Math.floor(t / secondMS);\r\n  const milliseconds = t - seconds * secondMS;\r\n  return {\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    milliseconds,\r\n  };\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback: Function, time?: number) {\r\n  const savedCallback = useRef<Function>();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      if (savedCallback.current) {\r\n        savedCallback.current();\r\n      }\r\n    }\r\n    const timer = setInterval(tick, time);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [time]);\r\n}\r\n\r\n","import React from \"react\";\n\nimport \"./App.scss\";\nimport { dateFilter, timestampToDays } from \"./utils/time-utils\";\nimport { fillLeft } from \"./utils/fill-left\";\nimport { useCurrentTime } from \"./utils/hooks/useCurrentTime\";\n\nconst RETIRE_TIME = new Date(\"2024/2/10 00:00:00.000\");\nconst RETIRE_TIME_LUNAR = \"二零二四年春节\";\n\nconst App = () => {\n  const currentTime = useCurrentTime(10);\n\n  const remainingTime = RETIRE_TIME.getTime() - currentTime.getTime();\n  const formattedRemainingTime = timestampToDays(remainingTime);\n\n  return (\n    <div className=\"app\">\n      <div className=\"title\">预退休倒计时</div>\n      <div className=\"retire-time\">\n        <div className=\"retire-time-solar\">\n          预退休时间：{dateFilter(RETIRE_TIME, \"YYYY-MM-dd HH:mm:ss\")}\n        </div>\n        <div className=\"retire-time-lunar\">即{RETIRE_TIME_LUNAR}</div>\n      </div>\n      <div className=\"current-time\">\n        当前时间：{dateFilter(currentTime, \"YYYY-MM-dd HH:mm:ss\")}\n      </div>\n      <div className=\"countdown\">\n        {remainingTime > 0 ? (\n          <>\n            <div>{`${fillLeft(formattedRemainingTime.days, 4)}天${fillLeft(\n              formattedRemainingTime.hours,\n              2\n            )}小时`}</div>\n            <div>{`${fillLeft(formattedRemainingTime.minutes, 2)}分钟${fillLeft(\n              formattedRemainingTime.seconds,\n              2\n            )}秒${fillLeft(formattedRemainingTime.milliseconds, 3)}毫秒`}</div>\n          </>\n        ) : (\n          \"可以退休啦！！！\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n","import { useState } from \"react\";\r\nimport { useInterval } from \"./useInterval\";\r\n\r\nexport function useCurrentTime(updateInterval = 1000) {\r\n  const [time, setTime] = useState(new Date());\r\n  useInterval(() => {\r\n    setTime(new Date());\r\n  }, updateInterval);\r\n  return time;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}