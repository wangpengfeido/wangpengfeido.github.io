{"version":3,"sources":["components/main-page/main-page.js","App.js","serviceWorker.js","index.js"],"names":["MainPage","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDuplicateClick","array_fragment","transformTextToArray","ref_textarea_source","current","value","split","array_duplicatedFragment","Array","from","Set","ref_textarea_result","join","state","React","createRef","inherits","createClass","key","text","result","forEach","item","trim","filter","_this2","react_default","a","createElement","className","onClick","type","ref","Component","App","main_page_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAGaA,eAAb,SAAAC,GACE,SAAAD,IAAc,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAmBFI,qBAAuB,WACrB,IAAMC,EAAiBR,EAAKS,qBAAqBT,EAAKU,oBAAoBC,QAAQC,MAAMC,MAAM,OACxFC,EAA2BC,MAAMC,KAAK,IAAIC,IAAIT,IACpDR,EAAKkB,oBAAoBP,QAAQC,MAAQE,EAAyBK,KAAK,OApBvEnB,EAAKoB,MAAQ,GAEbpB,EAAKU,oBAAsBW,IAAMC,YACjCtB,EAAKkB,oBAAsBG,IAAMC,YANrBtB,EADhB,OAAAC,OAAAsB,EAAA,EAAAtB,CAAAH,EAAAC,GAAAE,OAAAuB,EAAA,EAAAvB,CAAAH,EAAA,EAAA2B,IAAA,uBAAAb,MAAA,SAUuBc,GACnB,IAAIC,EAASxB,KAAKO,oBAAoBC,QAAQC,MAAMC,MAAM,MAO1D,OANAc,EAAOC,QAAQ,SAAAC,GACbA,EAAKC,SAEPH,EAASA,EAAOI,OAAO,SAAAF,GACrB,QAASA,MAhBf,CAAAJ,IAAA,SAAAb,MAAA,WA2BW,IAAAoB,EAAA7B,KACP,OAAQ8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACrBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAOL,EAAKzB,yBAA7B,iBAEF0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,aAAnB,wEAGJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,YAAUI,IAAKpC,KAAKO,uBAEtBuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,YAAUI,IAAKpC,KAAKe,6BA1C9BpB,EAAA,CAA8B0C,cCkBfC,cAfb,SAAAA,IAAc,IAAAzC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,IACZzC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwC,GAAAnC,KAAAH,QAEKiB,MAAQ,GAHDpB,wEAOZ,OACEiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,cAVUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.860a90a9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './main-page.scss';\r\n\r\nexport class MainPage extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {};\r\n\r\n    this.ref_textarea_source = React.createRef();\r\n    this.ref_textarea_result = React.createRef();\r\n  }\r\n\r\n  transformTextToArray(text) {\r\n    let result = this.ref_textarea_source.current.value.split('\\n');\r\n    result.forEach(item => {\r\n      item.trim();\r\n    });\r\n    result = result.filter(item => {\r\n      return !!item;\r\n    });\r\n    return result\r\n  }\r\n\r\n  handleDuplicateClick = () => {\r\n    const array_fragment = this.transformTextToArray(this.ref_textarea_source.current.value.split('\\n'));\r\n    const array_duplicatedFragment = Array.from(new Set(array_fragment));\r\n    this.ref_textarea_result.current.value = array_duplicatedFragment.join('\\n');\r\n  };\r\n\r\n  render() {\r\n    return (<div className='main-page'>\r\n      <div>\r\n        <div>\r\n          <button onClick={() => {this.handleDuplicateClick()}}>去重</button>\r\n        </div>\r\n        <div>\r\n          <label><input type='checkbox'/>高级（本功能尚未开发）</label>\r\n        </div>\r\n      </div>\r\n      <div className='content'>\r\n        <div className='content__source'>\r\n          <textarea ref={this.ref_textarea_source}></textarea>\r\n        </div>\r\n        <div className='content__result'>\r\n          <textarea ref={this.ref_textarea_result}></textarea>\r\n        </div>\r\n      </div>\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {MainPage} from \"./components/main-page/main-page\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainPage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}